// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id                 String   @id @default(cuid())
  userId             String   @unique
  username           String   @unique
  bio                String?
  profileImageUrl    String?
  backgroundImageUrl String?
  isPrivate          Boolean? @default(false)

  posts Post[] @relation("UserPost")

  commenter  Comment[] @relation("Commenter")
  whoLikedIt Like[]    @relation("WhoLikedIt")
  whoSavedIt Save[]    @relation("WhoSavedIt")

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id           String  @id @default(cuid())
  caption      String?
  tags         String?
  postImageUrl String?
  location     String?
  views        Int?

  creatorId String
  creator   User   @relation("UserPost", fields: [creatorId], references: [id], onDelete: Cascade)

  Comments  Comment[] @relation("Comments")
  LikedPost Like[]    @relation("LikedPost")
  SavedPost Save[]    @relation("SavedPost")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

enum STATUS {
  ACCEPTED
  PENDING
  BLOCKED
}

model Follow {
  id     String @id @default(cuid())
  status STATUS @default(PENDING)

  followerId  String
  followingId String

  follower  User @relation(name: "Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(uuid())

  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Comment {
  id      String @id @default(cuid())
  comment String @db.Text

  commenterId String
  postId      String

  commenter User @relation("Commenter", fields: [commenterId], references: [id], onDelete: Cascade)
  post      Post @relation("Comments", fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([commenterId])
  @@index([postId])
}

model Like {
  id        String   @id @default(cuid())
  isLiked   Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  postId String

  user User @relation("WhoLikedIt", fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation("LikedPost", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Save {
  id        String   @id @default(cuid())
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  postId String

  user User @relation("WhoSavedIt", fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation("SavedPost", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}
